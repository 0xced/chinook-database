<#@ template hostspecific="True"#>
<#@ output extension="cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="..\..\ChinookDatabase\T4Templates\Chinook.ttinclude" #>
<#
this.Host.SetOutputEncoding(System.Text.Encoding.UTF8,false);
#>/*******************************************************************************
 * Chinook Database - Version <#= DataSetHelper.GetVersionNumber() #>
 * Description: Test fixture for Chinook database.
 * DB Server: SQL Server
 * Author: Luis Rocha
 * License: http://www.codeplex.com/ChinookDatabase/license
 * 
 * IMPORTANT: In order to run these test fixtures, you will need to:
 *            1. Run the generated SQL script to create the database to be tested.
 *            2. Verify that app.config has the proper connection string (user/password).
 ********************************************************************************/
using System;
using System.Data;
using NUnit.Framework;
using NUnit.Framework.SyntaxHelpers;
<#
    FileInfo thisFile = new FileInfo(Host.TemplateFile);
    ChinookDataSet ds = new ChinookDataSet();
    ds.ReadXml(thisFile.DirectoryName + @"\..\..\ChinookDatabase\DataSources\Xml\ChinookData.xml");
#>
namespace ChinookMetadata.Test.DatabaseTests
{
    /// <summary>
    /// Base class for Chinook database test fixture.
    /// </summary>
    public abstract class DatabaseFixture
    {
        /// <summary>
        /// Method to execute a SQL query and return a dataset.
        /// </summary>
        /// <param name="query">Query string to be executed.</param>
        /// <returns>DataSet with the query results.</returns>
        protected abstract DataSet ExecuteQuery(string query);
        
        #region Public Tests
        /// <summary>
        /// Verifies that the Unicode characters are populated properly.
        /// </summary>
        [Test]
        public void RecordsWithProperUnicodeCharacters()
        {
<#
    for (int i=0; i < 10 || i < ds.Tables.Count; i++)
    {
		DataTable table = ds.Tables[i];
#>
			AssertThatCustomerId<#= i+1 #>HasProperUnicodeCharacters();
<#
    } // foreach table
#>
        }

        /// <summary>
        /// Asserts that all invoices contain invoice lines.
        /// </summary>
        [Test]
        public void AllInvoicesMustHaveInvoiceLines()
        {
            DataSet dataSet = ExecuteQuery("SELECT count(InvoiceId) FROM Invoice WHERE InvoiceId NOT IN (SELECT InvoiceId FROM InvoiceLine GROUP BY InvoiceId)");
            Assert.That(dataSet.Tables[0].Rows[0][0], Is.EqualTo(0), "The number of invoices with no invoice lines must be zero.");
        }
        
        /// <summary>
        /// Asserts that invoice total matches sum of invoice lines.
        /// </summary>
        [Test]
        public void InvoiceTotalMustMatchSumOfInvoiceLines()
        {
            DataSet dataSet = ExecuteQuery("SELECT Invoice.InvoiceId, SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) AS CalculatedTotal, Invoice.Total AS Total FROM InvoiceLine INNER JOIN Invoice ON InvoiceLine.InvoiceId = Invoice.InvoiceId GROUP BY Invoice.InvoiceId, Invoice.Total");

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                Assert.That(row["CalculatedTotal"].ToString(), Is.EqualTo(row["Total"].ToString()), string.Format("The total field of InvoiceId={0} does not match its invoice lines.", row["InvoiceId"]));
            }
        }
<#
    foreach (DataTable table in ds.Tables)
    {
#>

        /// <summary>
        /// Verifies that the <#= table.TableName #> table was populated properly.
        /// </summary>
        [Test]
        public void <#= table.TableName #>TableShouldBePopulated()
        {
            DataSet dataSet = ExecuteQuery("SELECT * FROM <#= table.TableName #>");
            Assert.That(dataSet.Tables[0].Rows.Count, Is.EqualTo(<#= table.Rows.Count #>), "Total number of records mismatch.");
        }

        /// <summary>
        /// Verifies that last record of <#= table.TableName #> table has the proper information.
        /// </summary>
        [Test]
        public void <#= table.TableName #>LastRecordHasProperInfo()
        {
            DataSet dataSet = ExecuteQuery("SELECT * FROM <#= table.TableName #> ORDER BY <#= DataSetHelper.GetPrimaryKeyString (table) #>");
            DataTable table = dataSet.Tables[0];
            Assert.IsNotNull(table);
            DataRow row = table.Rows[table.Rows.Count - 1];
            Assert.IsNotNull(row);

			// Assert that the last record has the proper information.            
<#
		int num = table.Rows.Count - 1;
		foreach (DataColumn col in table.Columns)
		{
			string expected = DataSetHelper.GetExpectedValue(col, table.Rows[num][col.ColumnName].ToString());
#>            Assert.That(row["<#= col.ColumnName #>"].ToString(), Is.EqualTo(<#= expected #>), "<#= col.ColumnName #> mismatch.");
<#
		} // foreach column
#>        }
<#
    } // foreach table
#>
		#endregion

		#region Private Methods
<#
    for (int i=0; i < 10 || i < ds.Tables.Count; i++)
    {
		DataTable table = ds.Tables[i];
#>
        /// <summary>
        /// Verifies that CustomerId <#= i+1 #> has expected Unicode characters.
        /// </summary>
        private void AssertThatCustomerId<#= i+1 #>HasProperUnicodeCharacters()
        {
            DataSet dataSet = ExecuteQuery("SELECT * FROM Customer WHERE CustomerId = <#= i+1 #>");
            Assert.That(dataSet.Tables[0].Rows.Count, Is.EqualTo(1), "Cannot find the Customer record that contains unicode characters. This record was not added to the Customer table or the SQL script did not use Unicode characters properly.");
            DataRow row = dataSet.Tables[0].Rows[0];
            
<#
		foreach (DataColumn col in ds.Tables["Customer"].Columns)
		{
			string expected = DataSetHelper.GetExpectedValue(col, ds.Tables["Customer"].Rows[i][col.ColumnName].ToString());
#>            Assert.That(row["<#= col.ColumnName #>"].ToString(), Is.EqualTo(<#= expected #>), "<#= col.ColumnName #> mismatch.");
<#
		}
#>
		}

<#
    } // foreach table
#>
		#endregion
    }
}
