<#@ template language="C#v3.5" hostspecific="True"#>
<#@ output extension=".t4"#>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ assembly name="System.Data.DataSetExtensions.dll"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="System.Xml.XPath"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<# 
	// Set options here
	var options = new {
		Path = Path.GetDirectoryName(Host.TemplateFile),
		SearchPattern = "*.cs",
	};

	StringBuilder output = new StringBuilder();

	// Reads this template and copy its header info.
	string[] lines = File.ReadAllLines(Host.TemplateFile);
	foreach (string line in lines)
	{
		if (!line.Trim().StartsWith("<" + "#@")) 
			break;
		if (line.Contains("assembly") || line.Contains("import"))
			output.AppendLine(line);
	}
	
	// Open code block.
	output.AppendLine("<" + "#+");
#><#= output.ToString() #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#
	output = new StringBuilder();

	// Reads all the classes that compose this 
	DirectoryInfo directoryInfo = new DirectoryInfo(options.Path);
	FileInfo[] files = directoryInfo.GetFiles(options.SearchPattern, SearchOption.AllDirectories);

	foreach (FileInfo file in files)
	{
		//if (file.Name.StartsWith("ChinookDataSet")) continue;
		if (file.Name.StartsWith("AssemblyInfo")) continue;
	
		lines = File.ReadAllLines(file.FullName);
		foreach (string line in lines)
		{
			if (!line.StartsWith("using") &&
				!line.StartsWith("namespace") &&
				!line.StartsWith("{") &&
				!line.StartsWith("}") )
				output.AppendLine(line);
		}
	}

	// Close code block.
	output.AppendLine("#" + ">");
#><#= output.ToString() #>