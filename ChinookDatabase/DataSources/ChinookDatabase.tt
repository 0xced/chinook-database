<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\_T4Templates\Chinook.ttinclude"#>
<#@ include file="..\_T4Templates\Manager.ttinclude"#>
<#

var options = new 
{
	DatabaseName = "Chinook",
	PopulateDatabase = true,
	Version = new Version("2.0.0.0"),
	ModelFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\Chinook.edmx"),
	DataSource = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"_Xml\ChinookData.xml"),
	DdlStrategies = new IDdlStrategy[] 
							{
								new SqlServerStrategy { IsIdentityEnabled = false, Encoding = Encoding.Unicode },
								new SqlServerStrategy { IsIdentityEnabled = true, Encoding = Encoding.Unicode },
								new SqlServerCompactStrategy { IsIdentityEnabled = false },
								new SqlServerCompactStrategy { IsIdentityEnabled = true },
								new SqliteStrategy { IsIdentityEnabled = false },
								new MySqlStrategy { IsIdentityEnabled = false },
								new MySqlStrategy { IsIdentityEnabled = true },
								new OracleStrategy { IsIdentityEnabled = false },
								new EffiProzStrategy { IsIdentityEnabled = false },
								new EffiProzStrategy { IsIdentityEnabled = true }
						   	}
};

// Read the existing store item collection from the edmx file.
IList<EdmSchemaError> existingSsdlErrors;
var existingStore = EdmExtension.CreateStoreItemCollection(EdmHelper.GetSsdlFromEdmx(options.ModelFile), 
														   options.Version,
														   out existingSsdlErrors);

var fileManager = Manager.Create(Host, GenerationEnvironment);

foreach (IDdlStrategy strategy in options.DdlStrategies)
{
	//************************************************************************
	// Start SQL file.
	//************************************************************************
	var filename = GetFileName(strategy);
	fileManager.StartNewFile(filename, strategy.Encoding);
#>
/*******************************************************************************
   Chinook Database - Version <#= DataSetHelper.GetVersionNumber() #>
   Script: <#= filename #>
   Description: Creates and populates the Chinook database.
   DB Server: <#= strategy.Name #>
   Author: Luis Rocha
   License: http://www.codeplex.com/ChinookDatabase/license
********************************************************************************/

<#
	if (strategy.CanReCreateDatabase)
	{
#>
/*******************************************************************************
   Drop database if it exists
********************************************************************************/
<#= strategy.WriteDropDatabase(options.DatabaseName) #>

/*******************************************************************************
   Create database
********************************************************************************/
<#= strategy.WriteCreateDatabase(options.DatabaseName) #>
<#= strategy.WriteUseDatabase(options.DatabaseName) #>
<#
	}
	else
	{
		// Cannot recreate the database, so we need to remove foreign keys and tables one by one.
#>
/*******************************************************************************
   Drop Foreign Keys Constraints
********************************************************************************/
<#		foreach (AssociationSet associationSet in existingStore.GetAllAssociationSets()) { #>
<#= strategy.WriteDropForeignKey(associationSet) #>
<#= strategy.WriteExecuteCommand() #>
<#	    } #>

/*******************************************************************************
   Drop Tables
********************************************************************************/
<# 		foreach (var entitySet in existingStore.GetAllEntitySets()) { #>
<#= strategy.WriteDropTable(entitySet) #>
<#= strategy.WriteExecuteCommand() #>
<#		} 
	}
#>

/*******************************************************************************
   Create Tables
********************************************************************************/
<#
	foreach (var entitySet in existingStore.GetAllEntitySets())
	{
		var tableName = strategy.GetFullyQualifiedName(entitySet.GetSchemaName(), entitySet.GetTableName());
#>
CREATE TABLE <#= tableName #>
(<#

    for (int i = 0; i < entitySet.ElementType.Properties.Count; i++)
    {
        var prop = entitySet.ElementType.Properties[i];#><#= ( i>0 ? "," : "") #>
    <#= strategy.WriteCreateColumn(prop, options.Version) #><#
	}

	// Create Primary Key Constraint.
	if (strategy.CreatePrimaryKeyOnTableCreate)
	{
		string pkName = strategy.FormatName("PK_" + entitySet.GetTableName());#>,
    CONSTRAINT <#= pkName #> PRIMARY KEY <#= strategy.GetClustered(existingStore, entitySet.ElementType)#> (<#= strategy.GetColumns(entitySet.ElementType.GetKeyProperties(), ',')#>)<#
	}
	
	// Create Foreign Key depending on the strategy.
	if (strategy.CreateForeignKeyOnTableCreate)
	{
        foreach (var item in from associationSet in existingStore.GetAllAssociationSets()
                             let constraint = associationSet.ElementType.ReferentialConstraints.Single()
                             let toEnd = associationSet.AssociationSetEnds.Where(a => a.CorrespondingAssociationEndMember == constraint.ToRole).Single()
                             where toEnd.EntitySet == entitySet
                             let refEntity = associationSet.AssociationSetEnds.Where(a => a.CorrespondingAssociationEndMember == constraint.FromRole).Single().EntitySet
                             select new {constraint, refEntity})
        {#>,
    FOREIGN KEY (<#= strategy.GetColumns(item.constraint.ToProperties, ',') #>) REFERENCES <#= strategy.GetFullyQualifiedName(item.refEntity.GetSchemaName(), item.refEntity.GetTableName()) #> (<#= strategy.GetColumns(item.constraint.FromProperties, ',') #>) 
		ON DELETE <#= strategy.GetDeleteAction(item.constraint) #> ON UPDATE NO ACTION<#
        }
	
	}
#>

);
<#= strategy.WriteExecuteCommand() #>
<#
	}	// foreach EntityType
#>

/*******************************************************************************
   Create Primary Key Unique Indexes
********************************************************************************/
<#
    foreach (var entitySet in existingStore.GetAllEntitySets())
    {
		string tableName = strategy.GetFullyQualifiedName(entitySet.GetSchemaName(), entitySet.GetTableName());
		string pkIndexName = strategy.FormatName("IPK_" + entitySet.GetTableName());
		
		// Create Primary Key Constraint.
		if (!strategy.CreatePrimaryKeyOnTableCreate)
		{
			string pkName = strategy.FormatName("PK_" + entitySet.GetTableName());
#>
ALTER TABLE <#= tableName #> ADD CONSTRAINT <#= pkName #> PRIMARY KEY (<#= strategy.GetColumns(entitySet.ElementType.GetKeyProperties(), ',')#>);
<#= strategy.WriteExecuteCommand() #>
<#			
		}

		// Create Primary Key Unique Constraint.
#>
CREATE UNIQUE INDEX <#= pkIndexName #> ON <#= tableName #>(<#= strategy.GetColumns(entitySet.ElementType.GetKeyProperties(), ',')#>);
<#= strategy.WriteExecuteCommand() #>
<#
    }
#>

/*******************************************************************************
   Create Foreign Keys
********************************************************************************/
<#
    foreach (AssociationSet associationSet in existingStore.GetAllAssociationSets())
    {
        var constraint = associationSet.ElementType.ReferentialConstraints.Single();
        var toEnd = associationSet.AssociationSetEnds.Where(a => a.CorrespondingAssociationEndMember == constraint.ToRole).Single();
        var fromEnd = associationSet.AssociationSetEnds.Where(a => a.CorrespondingAssociationEndMember == constraint.FromRole).Single();
        var toTableName = strategy.GetFullyQualifiedName(toEnd.EntitySet.GetSchemaName(), toEnd.EntitySet.GetTableName());
        var fromTableName = strategy.GetFullyQualifiedName(toEnd.EntitySet.GetSchemaName(), fromEnd.EntitySet.GetTableName());
		var constraintName = strategy.GetForeignKeyConstraintName(constraint);
		var fkName = strategy.FormatName(constraintName);
		var ifkName = strategy.FormatName("I" + constraintName);
		
		if (!strategy.CreateForeignKeyOnTableCreate)
		{
#>
ALTER TABLE <#= toTableName #> ADD CONSTRAINT <#= fkName #>
    FOREIGN KEY (<#= strategy.GetColumns(constraint.ToProperties, ',') #>) REFERENCES <#= fromTableName #> (<#= strategy.GetColumns(constraint.FromProperties, ',') #>)
    ON DELETE <#= strategy.GetDeleteAction(constraint) #> ON UPDATE NO ACTION;
<#= strategy.WriteExecuteCommand() #>
<#      
		} 
		
        // if the foreign keys are part of the primary key on the dependent end, then we should not add a constraint.
        if (!toEnd.EntitySet.ElementType.GetKeyProperties().Take(constraint.ToProperties.Count()).OrderBy(r => r.Name).SequenceEqual(constraint.ToProperties.OrderBy(r => r.Name)))
        {
#>
CREATE INDEX <#= ifkName #> ON <#= toTableName #> (<#= strategy.GetColumns(constraint.ToProperties, ',') #>);
<#= strategy.WriteExecuteCommand() #>
<#      
        }
    }
#>

/*******************************************************************************
   Populate Tables
********************************************************************************/
<#
    var ds = new ChinookDataSet();
    ds.ReadXml(options.DataSource);
    var sbFields = new StringBuilder();
    var sbValues = new StringBuilder();
	char delimiter = ',';

	foreach (DataTable table in ds.Tables)
	{
		var entitySet = (from e in existingStore.GetAllEntitySets() where e.Name == table.TableName select e).Single();
		var tableName = strategy.GetFullyQualifiedName(entitySet.GetSchemaName(), entitySet.GetTableName());
#>
<#
        foreach (DataRow row in table.Rows)
        {
            sbFields.Length = 0;
            sbValues.Length = 0;
			
            foreach (DataColumn col in table.Columns)
            {
                string value = row[col.ColumnName].ToString();
                if ((col.AutoIncrement && strategy.IsIdentityEnabled) || value.Length==0) continue;
				
                if (col.DataType == typeof(DateTime))
                {
                    value = strategy.FormatDateValue(value);
                }
                else if (col.DataType == typeof(String))
                {
                    value = strategy.FormatStringValue(value);
                }
				
                sbValues.AppendFormat("{0}{1} ", value, delimiter);
                sbFields.AppendFormat("{0}{1} ", strategy.FormatName(col.ColumnName), delimiter);
            }

            var fields = sbFields.ToString().Trim().TrimEnd(delimiter);
            var values = sbValues.ToString().Trim().TrimEnd(delimiter);
#>
<#= string.Format("INSERT INTO {0} ({1}) VALUES ({2});", tableName, fields, values) #>
<#
        }	// foreach DataRow
#>

<#
    }	// foreach DataTable
#>

<#
	
	//************************************************************************
	// End SQL file.
	//************************************************************************
	fileManager.EndBlock();
}	// foreach options.DdlStrategies


var strategies = (from item in options.DdlStrategies select new { item.Name, item.CommandLineFormat }).Distinct();
foreach (var strategy in strategies)
{
	//************************************************************************
	// Start batch file.
	//************************************************************************
	var filename = string.Format("Create{0}.bat", strategy.Name);
	var commandFormat = "echo {0}";
	
	if (!string.IsNullOrEmpty(strategy.CommandLineFormat)) 
	{
    	fileManager.StartNewFile(filename);
#>
@echo off
echo Chinook Database Version <#= DataSetHelper.GetVersionNumber() #>
echo.

if "%1"=="" goto MENU
if not exist %1 goto ERROR

set SQLFILE=%1
goto RUNSQL

:ERROR
echo The file %1 does not exist.
echo.
goto END

:MENU
echo Options:
echo.
<# 	
	// Get all files of the same strategy.
	IList<IDdlStrategy> items = (from item in options.DdlStrategies where item.Name == strategy.Name select item).ToList();
	for(int i=0; i<items.Count; i++) 
	{ 
#>
echo <#= (i+1) #>. Run <#= GetFileName(items[i]) #>
<# 	} #>
echo <#= items.Count+1 #>. Exit
echo.
choice /c 123
<# 	for(int i=0; i<items.Count; i++) { #>
if (%ERRORLEVEL%)==(<#= (i+1) #>) set SQLFILE=<#= GetFileName(items[i]) #>
<# 	} #>
if (%ERRORLEVEL%)==(<#= items.Count+1 #>) goto END

:RUNSQL
echo.
echo Running %SQLFILE%...
<#= string.Format(strategy.CommandLineFormat, "%SQLFILE%") #>

:END
echo.
set SQLFILE=

<#
	//************************************************************************
	// End batch file.
	//************************************************************************
		fileManager.EndBlock();
	}
}	// foreach options.DdlStrategies

fileManager.Process(true);

#>
<#+ 

private static string GetFileName(IDdlStrategy strategy)
{
	var suffix = string.Empty;
	if (strategy.IsIdentityEnabled)
		suffix = "_AutoIncrementPKs";
	
	return string.Format("Chinook_{0}{1}.{2}", strategy.Name, suffix, strategy.FileExtension);
}

#>